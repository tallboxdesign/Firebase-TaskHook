
/**
 * @fileOverview Defines Zod schemas and their corresponding TypeScript types for AI flows.
 * This file does not use the 'use server' directive and can be safely imported by server components and actions.
 */
import { z } from 'zod';
import { DEFAULT_AI_MODEL_ID, ALL_MODEL_IDS_ENUM } from '@/lib/types'; 

// --- Schemas for generate-task-tags flow ---

export const GenerateTaskTagsPromptDataSchema = z.object({
  title: z.string().describe('The title of the task.'),
  description: z.string().describe('The description of the task.'),
});

export const GenerateTaskTagsFlowInputSchema = z.object({
  title: z.string().describe('The title of the task.'),
  description: z.string().describe('The description of the task.'),
  modelId: z.enum(ALL_MODEL_IDS_ENUM).optional().default(DEFAULT_AI_MODEL_ID).describe(`The AI model ID to use. Defaults to '${DEFAULT_AI_MODEL_ID}'.`),
  apiKey: z.string().optional().describe('Optional API Key for the selected model provider. If provided, it will be used for this specific call.'),
});
export type GenerateTaskTagsFlowInput = z.infer<typeof GenerateTaskTagsFlowInputSchema>;

export const GenerateTaskTagsOutputSchema = z.object({
  tags: z.array(z.string()).describe('A list of 3-5 relevant tags for the task. Tags should be concise keywords.'),
  inputTokens: z.number().optional().describe('Number of input tokens used by the AI model.'),
  outputTokens: z.number().optional().describe('Number of output tokens generated by the AI model.'),
});
export type GenerateTaskTagsOutput = z.infer<typeof GenerateTaskTagsOutputSchema>;


// --- Schemas for prioritize-tasks flow ---
export const AIFlowTaskDataSchema = z.object({
  id: z.string().describe('Unique identifier for the task.'),
  title: z.string().describe('Title of the task.'),
  description: z.string().describe('Detailed description of the task.'),
  dueDate: z.string().describe('Due date of the task (YYYY-MM-DD).'),
  priority: z.string().describe('Priority level set by the user (High, Medium, Low).'),
  userId: z.string().describe('The ID of the user to whom the task belongs.'),
  category: z.string().describe('Category assigned to the task (e.g., Work, Personal).'),
  tags: z.array(z.string()).describe('List of tags associated with the task.'),
});
export type AIFlowTaskData = z.infer<typeof AIFlowTaskDataSchema>;


export const PrioritizeTasksPromptDataSchema = z.object({
  task: AIFlowTaskDataSchema,
  userContext: z.string().optional().describe('A string containing user preferences and context for prioritization (e.g., focus areas, urgency definitions, keywords).'),
});

export const PrioritizeTasksFlowInputSchema = z.object({
  task: AIFlowTaskDataSchema,
  userContext: z.string().optional().describe('A string containing user preferences and context for prioritization.'),
  modelId: z.enum(ALL_MODEL_IDS_ENUM).optional().default(DEFAULT_AI_MODEL_ID).describe(`The AI model ID to use. Defaults to '${DEFAULT_AI_MODEL_ID}'.`),
  apiKey: z.string().optional().describe('Optional API Key for the selected model provider. If provided, it will be used for this specific call.'),
});
export type PrioritizeTasksFlowInput = z.infer<typeof PrioritizeTasksFlowInputSchema>;

export const PrioritizeTasksOutputSchema = z.object({
  aiPriorityScore: z
    .number()
    .min(0).max(100)
    .describe('AI-assessed priority score (0-100, higher is more urgent).'),
  reasoning: z.string().describe('Explanation for the AI priority score.'),
  suggestedAction: z
    .string()
    .describe('Suggested next action for the user regarding this task. If the task is too vague, this should prompt the user to add details.'),
  isVague: z.boolean().optional().default(false).describe('True if the AI determined the task description is too vague and needs more details for accurate prioritization.'),
  inputTokens: z.number().optional().describe('Number of input tokens used by the AI model for prioritization.'),
  outputTokens: z.number().optional().describe('Number of output tokens generated by the AI model for prioritization.'),
});
export type PrioritizeTasksOutput = z.infer<typeof PrioritizeTasksOutputSchema>;


// --- Schemas for parse-voice-transcript flow ---
export const ParseVoiceTranscriptInputSchema = z.object({
  fullTranscript: z.string().describe('The full transcript of the user\'s voice input.'),
  modelId: z.enum(ALL_MODEL_IDS_ENUM).optional().default(DEFAULT_AI_MODEL_ID).describe(`The AI model ID to use for parsing. Defaults to '${DEFAULT_AI_MODEL_ID}'.`),
  apiKey: z.string().optional().describe('Optional API Key for the selected model provider.'),
});
export type ParseVoiceTranscriptInput = z.infer<typeof ParseVoiceTranscriptInputSchema>;

export const ParsedVoiceTaskSchema = z.object({
  title: z.string().describe('Concise and clear title for the task.'),
  description: z.string().describe('Original segment or cleaned-up version of the transcript pertaining to this task.'),
  dueDate: z.string().describe('Due date for the task in YYYY-MM-DD format. Empty string if no date mentioned or ambiguous.'),
});
export type ParsedVoiceTask = z.infer<typeof ParsedVoiceTaskSchema>;

export const ParseVoiceTranscriptOutputSchema = z.object({
  parsedTasks: z.array(ParsedVoiceTaskSchema).describe('An array of tasks parsed from the transcript.'),
  inputTokens: z.number().optional().describe('Number of input tokens used by the AI model for parsing.'),
  outputTokens: z.number().optional().describe('Number of output tokens generated by the AI model for parsing.'),
});
export type ParseVoiceTranscriptOutput = z.infer<typeof ParseVoiceTranscriptOutputSchema>;
